// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/bridge/contract.go

// Package mockbridge is a generated GoMock package.
package mockbridge

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	email "github.com/muhammad-fakhri/go-libs/email"
)

// MockBridge is a mock of Bridge interface.
type MockBridge struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeMockRecorder
}

// MockBridgeMockRecorder is the mock recorder for MockBridge.
type MockBridgeMockRecorder struct {
	mock *MockBridge
}

// NewMockBridge creates a new mock instance.
func NewMockBridge(ctrl *gomock.Controller) *MockBridge {
	mock := &MockBridge{ctrl: ctrl}
	mock.recorder = &MockBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridge) EXPECT() *MockBridgeMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockBridge) SendEmail(ctx context.Context, mail *email.MailDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, mail)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockBridgeMockRecorder) SendEmail(ctx, mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockBridge)(nil).SendEmail), ctx, mail)
}
