// Code generated by MockGen. DO NOT EDIT.
// Source: internal/component/email/contract.go

// Package mockcomponent is a generated GoMock package.
package mockcomponent

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	email "github.com/muhammad-fakhri/go-libs/email"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockClienter) Send(mail *email.MailDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", mail)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockClienterMockRecorder) Send(mail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockClienter)(nil).Send), mail)
}
