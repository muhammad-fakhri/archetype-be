// Code generated by MockGen. DO NOT EDIT.
// Source: internal/component/lock/contract.go

// Package mockcomponent is a generated GoMock package.
package mockcomponent

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// ReleaseLock mocks base method.
func (m *MockLocker) ReleaseLock(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLock", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLock indicates an expected call of ReleaseLock.
func (mr *MockLockerMockRecorder) ReleaseLock(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLock", reflect.TypeOf((*MockLocker)(nil).ReleaseLock), key)
}

// SetLockWithWait mocks base method.
func (m *MockLocker) SetLockWithWait(key string, ttl time.Duration, maxRetryCount int, sleepDuration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLockWithWait", key, ttl, maxRetryCount, sleepDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLockWithWait indicates an expected call of SetLockWithWait.
func (mr *MockLockerMockRecorder) SetLockWithWait(key, ttl, maxRetryCount, sleepDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLockWithWait", reflect.TypeOf((*MockLocker)(nil).SetLockWithWait), key, ttl, maxRetryCount, sleepDuration)
}

// WaitForLock mocks base method.
func (m *MockLocker) WaitForLock(key string, maxRetryCount int, sleepDuration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForLock", key, maxRetryCount, sleepDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForLock indicates an expected call of WaitForLock.
func (mr *MockLockerMockRecorder) WaitForLock(key, maxRetryCount, sleepDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForLock", reflect.TypeOf((*MockLocker)(nil).WaitForLock), key, maxRetryCount, sleepDuration)
}
